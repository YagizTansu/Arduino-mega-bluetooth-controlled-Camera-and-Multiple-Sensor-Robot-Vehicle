/* servo defination*/
#include <Servo.h>
Servo servo;
int servoDegree = 0;

/*temperature defination*/
#include "DHT.h"
#define DHTPIN A0
#define DHTTYPE DHT11


/*LDR defination*/
#define ldrPin A1

/*temperature defination*/
#define gasSensor A2
DHT tempSensor(DHTPIN, DHTTYPE);

/*timer interrupt variables*/
int counter = 0;
byte done = 0;

/*ultrasonic defination*/
const int trigger_pin = 12;
const int echo_pin = 8;
float timeUltrasonic;
float distance;

/* defined the right motor control pins */
const int  PIN_MOTOR_RIGHT_UP = 7;
const int PIN_MOTOR_RIGHT_DN = 6;

/* defined the left motor control pins */
const int  PIN_MOTOR_LEFT_UP = 5;
const int PIN_MOTOR_LEFT_DN = 4;

/* defined motors speed control pins */
const int  PIN_MOTOR_LEFT_SPEED = 9;
const int PIN_MOTOR_RIGHT_SPEED = 10;

/* car gear defination*/
int gear = 1;
int motorSpeed = 50;


void setup()
{
  /*ultrasonic pinmode*/
  pinMode(echo_pin,INPUT);
  pinMode(trigger_pin,OUTPUT);
  
  Serial.begin(9600);//Serial start
  servo.attach(11);//servo start  
  tempSensor.begin(); //dht11 start
  while (!Serial);

  /* initialization pins L298N*/
  pinMode (PIN_MOTOR_RIGHT_UP, OUTPUT);
  pinMode (PIN_MOTOR_RIGHT_DN, OUTPUT);
  pinMode (PIN_MOTOR_LEFT_UP, OUTPUT);
  pinMode (PIN_MOTOR_LEFT_DN, OUTPUT);
  pinMode (PIN_MOTOR_LEFT_SPEED, OUTPUT);
  pinMode (PIN_MOTOR_RIGHT_SPEED, OUTPUT);

  /* TIMER3 INTERRUPT DEFINATION*/
    cli();
    //timer3 1 Hz'
    TCCR3A = 0;// TCCR3A register 0
    TCCR3B = 0;// TCCR3B register 0
    TCNT3  = 0;//sayac değeri  0'la
  //OCR3A karşılaştırma registeri 1Hz değer için ayarlanıyor
  //16 MHz osilatör,1Hz timer3 ın çalışma frekansı,1024 prescalar
    OCR3A = 15624;// = (16*10^6) / (0.5*1024) - 1 (değer 65536 dan küçük)
  //   CTC mod açılıyor.
    TCCR3B |= (1 << WGM32);
  //   CS30 ve CS32 bitleri 1024 prescaler için ayarlanıyor
    TCCR3B |= (1 << CS32) | (1 << CS30);  
  // timer karşılaştırma interruptı aktifleştiriliyor
    TIMSK3 |= (1 << OCIE3A);
 
    //interreuptlar aktif
    sei();

}

void loop()
{
  if(Serial.available()){
    char inChar = (char)Serial.read();
    
    if(inChar == 'F'){ //move forward(all motors rotate in forward direction)
      forward();    
    }
    else if(inChar == 'B'){ //move reverse (all motors rotate in reverse direction)
      back();     
    }
    else if(inChar == 'R'){ //turn right (left side motors rotate in forward direction, right side motors doesn't rotate
     right();
    }
    else if(inChar == 'L'){ //turn left (right side motors rotate in forward direction, left side motors doesn't rotate)
     left();    
    }
    else if(inChar == 'S'){ //STOP (all motors stop)
     stopCar();
    }else if(distance <= 5.00){
     stopCar();
    }
    
    if(inChar == 'G'){
      motorSpeed += 50;
      if(motorSpeed > 255){
        motorSpeed = 50 ;
      }
    }

    
    if('l' == inChar){
      ldr();
    }
    if('t' == inChar){
      temp();
    }
    if('u' == inChar){
      ultrasonic();
    }
    if('g' == inChar){
      gas();
    }
  }


  
  if(done == 1){/* print the information since 5sc*/    
   Serial.println("********************");  
   ldr();
   temp();
   ultrasonic();
   gas();
   Serial.print("********************");  
   Serial.println();
   servo.write(servoDegree);
   done = 0; 
  }


}
void ldr(){
  int ldrVal = map(analogRead(ldrPin) , 366, 1018, 0, 499);
  Serial.print("light: ");
  Serial.print(ldrVal);
  
  if(ldrVal <= 120){
    Serial.print(" dark");
  }else{
    Serial.print(" normal");
  }
  Serial.println();
}
void temp(){
  float humadity = tempSensor.readHumidity();//humadity read
  float temp = tempSensor.readTemperature();//temp read
  float f = tempSensor.readTemperature(true);

  Serial.print("Nem: ");
  Serial.print(humadity);
  Serial.println(" %");
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.println(" *C ");
  Serial.print(f);
  Serial.println(" *F");

}
void gas(){
  
  float gasRate = analogRead(gasSensor);
 
  Serial.print("gas rate = ");
  Serial.print(gasRate);

  if(gasRate >= 400){
    Serial.print(" dangerous rate");
  }else{
    Serial.print(" normal rate");
  }
  Serial.println();
}
void ultrasonic(){
  digitalWrite(trigger_pin,HIGH);
  delayMicroseconds(1000);
  digitalWrite(trigger_pin,LOW);

  timeUltrasonic = pulseIn(echo_pin , HIGH);
  distance = (timeUltrasonic/2) / 29.1 ;

  Serial.print("distance : ");
  Serial.print(distance);
  Serial.print(" cm");
  Serial.println();
}

ISR(TIMER3_COMPA_vect){
  counter++;
  if(counter == 5){
    done = 1;
    counter = 0;
    if(servoDegree == 0){
      servoDegree = 110;
    }else{
      servoDegree = 0;
    }
  }
}
void forward(){
    analogWrite(PIN_MOTOR_LEFT_SPEED,motorSpeed);
    analogWrite(PIN_MOTOR_RIGHT_SPEED,motorSpeed);
    digitalWrite(PIN_MOTOR_RIGHT_UP,HIGH);
    digitalWrite(PIN_MOTOR_LEFT_UP,HIGH);
    digitalWrite(PIN_MOTOR_LEFT_DN,LOW);
    digitalWrite(PIN_MOTOR_RIGHT_DN,LOW);  
}
void back(){
    analogWrite(PIN_MOTOR_LEFT_SPEED,motorSpeed);
    analogWrite(PIN_MOTOR_RIGHT_SPEED,motorSpeed);
    digitalWrite(PIN_MOTOR_RIGHT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_DN,HIGH);
    digitalWrite(PIN_MOTOR_RIGHT_DN,HIGH);
}
void left(){
    analogWrite(PIN_MOTOR_LEFT_SPEED,motorSpeed);
    analogWrite(PIN_MOTOR_RIGHT_SPEED,motorSpeed);    
    digitalWrite(PIN_MOTOR_RIGHT_UP,HIGH);
    digitalWrite(PIN_MOTOR_LEFT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_DN,HIGH);
    digitalWrite(PIN_MOTOR_RIGHT_DN,LOW); 
}
void right(){
    analogWrite(PIN_MOTOR_LEFT_SPEED,motorSpeed);
    analogWrite(PIN_MOTOR_RIGHT_SPEED,motorSpeed);     
    digitalWrite(PIN_MOTOR_RIGHT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_UP,HIGH);
    digitalWrite(PIN_MOTOR_LEFT_DN,LOW);
    digitalWrite(PIN_MOTOR_RIGHT_DN,HIGH);
}
void stopCar(){
    digitalWrite(PIN_MOTOR_RIGHT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_UP,LOW);
    digitalWrite(PIN_MOTOR_LEFT_DN,LOW);
    digitalWrite(PIN_MOTOR_RIGHT_DN,LOW);
}
